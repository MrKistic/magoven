<?php

/**
 * Base class that represents a row from the 'publication' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue May  5 16:41:51 2015
 *
 * @package    lib.model.om
 */
abstract class BasePublication extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PublicationPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the application_id field.
	 * @var        string
	 */
	protected $application_id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the development_mode field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $development_mode;

	/**
	 * The value for the subscription_behavior field.
	 * @var        string
	 */
	protected $subscription_behavior;

	/**
	 * The value for the issue_download_security field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $issue_download_security;

	/**
	 * The value for the itunes_revalidation_duration field.
	 * Note: this column has a database default value of: 12
	 * @var        int
	 */
	protected $itunes_revalidation_duration;

	/**
	 * The value for the itunes_production_level field.
	 * @var        string
	 */
	protected $itunes_production_level;

	/**
	 * The value for the itunes_shared_secret field.
	 * @var        string
	 */
	protected $itunes_shared_secret;

	/**
	 * The value for the itunes_updated field.
	 * @var        string
	 */
	protected $itunes_updated;

	/**
	 * The value for the sandbox_pem field.
	 * @var        string
	 */
	protected $sandbox_pem;

	/**
	 * The value for the sandbox_password field.
	 * @var        string
	 */
	protected $sandbox_password;

	/**
	 * The value for the production_pem field.
	 * @var        string
	 */
	protected $production_pem;

	/**
	 * The value for the production_password field.
	 * @var        string
	 */
	protected $production_password;

	/**
	 * @var        array Issue[] Collection to store aggregation of Issue objects.
	 */
	protected $collIssues;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIssues.
	 */
	private $lastIssueCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PublicationPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->development_mode = true;
		$this->issue_download_security = false;
		$this->itunes_revalidation_duration = 12;
	}

	/**
	 * Initializes internal state of BasePublication object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [application_id] column value.
	 * 
	 * @return     string
	 */
	public function getApplicationId()
	{
		return $this->application_id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [development_mode] column value.
	 * 
	 * @return     boolean
	 */
	public function getDevelopmentMode()
	{
		return $this->development_mode;
	}

	/**
	 * Get the [subscription_behavior] column value.
	 * 
	 * @return     string
	 */
	public function getSubscriptionBehavior()
	{
		return $this->subscription_behavior;
	}

	/**
	 * Get the [issue_download_security] column value.
	 * 
	 * @return     boolean
	 */
	public function getIssueDownloadSecurity()
	{
		return $this->issue_download_security;
	}

	/**
	 * Get the [itunes_revalidation_duration] column value.
	 * 
	 * @return     int
	 */
	public function getItunesRevalidationDuration()
	{
		return $this->itunes_revalidation_duration;
	}

	/**
	 * Get the [itunes_production_level] column value.
	 * 
	 * @return     string
	 */
	public function getItunesProductionLevel()
	{
		return $this->itunes_production_level;
	}

	/**
	 * Get the [itunes_shared_secret] column value.
	 * 
	 * @return     string
	 */
	public function getItunesSharedSecret()
	{
		return $this->itunes_shared_secret;
	}

	/**
	 * Get the [optionally formatted] temporal [itunes_updated] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getItunesUpdated($format = 'Y-m-d H:i:s')
	{
		if ($this->itunes_updated === null) {
			return null;
		}


		if ($this->itunes_updated === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->itunes_updated);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->itunes_updated, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [sandbox_pem] column value.
	 * 
	 * @return     string
	 */
	public function getSandboxPem()
	{
		return $this->sandbox_pem;
	}

	/**
	 * Get the [sandbox_password] column value.
	 * 
	 * @return     string
	 */
	public function getSandboxPassword()
	{
		return $this->sandbox_password;
	}

	/**
	 * Get the [production_pem] column value.
	 * 
	 * @return     string
	 */
	public function getProductionPem()
	{
		return $this->production_pem;
	}

	/**
	 * Get the [production_password] column value.
	 * 
	 * @return     string
	 */
	public function getProductionPassword()
	{
		return $this->production_password;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PublicationPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PublicationPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PublicationPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [application_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setApplicationId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->application_id !== $v) {
			$this->application_id = $v;
			$this->modifiedColumns[] = PublicationPeer::APPLICATION_ID;
		}

		return $this;
	} // setApplicationId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = PublicationPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [development_mode] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setDevelopmentMode($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->development_mode !== $v || $this->isNew()) {
			$this->development_mode = $v;
			$this->modifiedColumns[] = PublicationPeer::DEVELOPMENT_MODE;
		}

		return $this;
	} // setDevelopmentMode()

	/**
	 * Set the value of [subscription_behavior] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setSubscriptionBehavior($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscription_behavior !== $v) {
			$this->subscription_behavior = $v;
			$this->modifiedColumns[] = PublicationPeer::SUBSCRIPTION_BEHAVIOR;
		}

		return $this;
	} // setSubscriptionBehavior()

	/**
	 * Set the value of [issue_download_security] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setIssueDownloadSecurity($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->issue_download_security !== $v || $this->isNew()) {
			$this->issue_download_security = $v;
			$this->modifiedColumns[] = PublicationPeer::ISSUE_DOWNLOAD_SECURITY;
		}

		return $this;
	} // setIssueDownloadSecurity()

	/**
	 * Set the value of [itunes_revalidation_duration] column.
	 * 
	 * @param      int $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setItunesRevalidationDuration($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->itunes_revalidation_duration !== $v || $this->isNew()) {
			$this->itunes_revalidation_duration = $v;
			$this->modifiedColumns[] = PublicationPeer::ITUNES_REVALIDATION_DURATION;
		}

		return $this;
	} // setItunesRevalidationDuration()

	/**
	 * Set the value of [itunes_production_level] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setItunesProductionLevel($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->itunes_production_level !== $v) {
			$this->itunes_production_level = $v;
			$this->modifiedColumns[] = PublicationPeer::ITUNES_PRODUCTION_LEVEL;
		}

		return $this;
	} // setItunesProductionLevel()

	/**
	 * Set the value of [itunes_shared_secret] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setItunesSharedSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->itunes_shared_secret !== $v) {
			$this->itunes_shared_secret = $v;
			$this->modifiedColumns[] = PublicationPeer::ITUNES_SHARED_SECRET;
		}

		return $this;
	} // setItunesSharedSecret()

	/**
	 * Sets the value of [itunes_updated] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setItunesUpdated($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->itunes_updated !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->itunes_updated !== null && $tmpDt = new DateTime($this->itunes_updated)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->itunes_updated = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PublicationPeer::ITUNES_UPDATED;
			}
		} // if either are not null

		return $this;
	} // setItunesUpdated()

	/**
	 * Set the value of [sandbox_pem] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setSandboxPem($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sandbox_pem !== $v) {
			$this->sandbox_pem = $v;
			$this->modifiedColumns[] = PublicationPeer::SANDBOX_PEM;
		}

		return $this;
	} // setSandboxPem()

	/**
	 * Set the value of [sandbox_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setSandboxPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sandbox_password !== $v) {
			$this->sandbox_password = $v;
			$this->modifiedColumns[] = PublicationPeer::SANDBOX_PASSWORD;
		}

		return $this;
	} // setSandboxPassword()

	/**
	 * Set the value of [production_pem] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setProductionPem($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->production_pem !== $v) {
			$this->production_pem = $v;
			$this->modifiedColumns[] = PublicationPeer::PRODUCTION_PEM;
		}

		return $this;
	} // setProductionPem()

	/**
	 * Set the value of [production_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Publication The current object (for fluent API support)
	 */
	public function setProductionPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->production_password !== $v) {
			$this->production_password = $v;
			$this->modifiedColumns[] = PublicationPeer::PRODUCTION_PASSWORD;
		}

		return $this;
	} // setProductionPassword()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->development_mode !== true) {
				return false;
			}

			if ($this->issue_download_security !== false) {
				return false;
			}

			if ($this->itunes_revalidation_duration !== 12) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->created_at = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->updated_at = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->application_id = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->development_mode = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->subscription_behavior = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->issue_download_security = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->itunes_revalidation_duration = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->itunes_production_level = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->itunes_shared_secret = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->itunes_updated = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->sandbox_pem = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->sandbox_password = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->production_pem = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->production_password = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = PublicationPeer::NUM_COLUMNS - PublicationPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Publication object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PublicationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PublicationPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collIssues = null;
			$this->lastIssueCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PublicationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePublication:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PublicationPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePublication:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PublicationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePublication:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(PublicationPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(PublicationPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePublication:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PublicationPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PublicationPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PublicationPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PublicationPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collIssues !== null) {
				foreach ($this->collIssues as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PublicationPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collIssues !== null) {
					foreach ($this->collIssues as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PublicationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCreatedAt();
				break;
			case 2:
				return $this->getUpdatedAt();
				break;
			case 3:
				return $this->getApplicationId();
				break;
			case 4:
				return $this->getName();
				break;
			case 5:
				return $this->getDevelopmentMode();
				break;
			case 6:
				return $this->getSubscriptionBehavior();
				break;
			case 7:
				return $this->getIssueDownloadSecurity();
				break;
			case 8:
				return $this->getItunesRevalidationDuration();
				break;
			case 9:
				return $this->getItunesProductionLevel();
				break;
			case 10:
				return $this->getItunesSharedSecret();
				break;
			case 11:
				return $this->getItunesUpdated();
				break;
			case 12:
				return $this->getSandboxPem();
				break;
			case 13:
				return $this->getSandboxPassword();
				break;
			case 14:
				return $this->getProductionPem();
				break;
			case 15:
				return $this->getProductionPassword();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PublicationPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCreatedAt(),
			$keys[2] => $this->getUpdatedAt(),
			$keys[3] => $this->getApplicationId(),
			$keys[4] => $this->getName(),
			$keys[5] => $this->getDevelopmentMode(),
			$keys[6] => $this->getSubscriptionBehavior(),
			$keys[7] => $this->getIssueDownloadSecurity(),
			$keys[8] => $this->getItunesRevalidationDuration(),
			$keys[9] => $this->getItunesProductionLevel(),
			$keys[10] => $this->getItunesSharedSecret(),
			$keys[11] => $this->getItunesUpdated(),
			$keys[12] => $this->getSandboxPem(),
			$keys[13] => $this->getSandboxPassword(),
			$keys[14] => $this->getProductionPem(),
			$keys[15] => $this->getProductionPassword(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PublicationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCreatedAt($value);
				break;
			case 2:
				$this->setUpdatedAt($value);
				break;
			case 3:
				$this->setApplicationId($value);
				break;
			case 4:
				$this->setName($value);
				break;
			case 5:
				$this->setDevelopmentMode($value);
				break;
			case 6:
				$this->setSubscriptionBehavior($value);
				break;
			case 7:
				$this->setIssueDownloadSecurity($value);
				break;
			case 8:
				$this->setItunesRevalidationDuration($value);
				break;
			case 9:
				$this->setItunesProductionLevel($value);
				break;
			case 10:
				$this->setItunesSharedSecret($value);
				break;
			case 11:
				$this->setItunesUpdated($value);
				break;
			case 12:
				$this->setSandboxPem($value);
				break;
			case 13:
				$this->setSandboxPassword($value);
				break;
			case 14:
				$this->setProductionPem($value);
				break;
			case 15:
				$this->setProductionPassword($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PublicationPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCreatedAt($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUpdatedAt($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setApplicationId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDevelopmentMode($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setSubscriptionBehavior($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIssueDownloadSecurity($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setItunesRevalidationDuration($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setItunesProductionLevel($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setItunesSharedSecret($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setItunesUpdated($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSandboxPem($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSandboxPassword($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setProductionPem($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setProductionPassword($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PublicationPeer::DATABASE_NAME);

		if ($this->isColumnModified(PublicationPeer::ID)) $criteria->add(PublicationPeer::ID, $this->id);
		if ($this->isColumnModified(PublicationPeer::CREATED_AT)) $criteria->add(PublicationPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(PublicationPeer::UPDATED_AT)) $criteria->add(PublicationPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(PublicationPeer::APPLICATION_ID)) $criteria->add(PublicationPeer::APPLICATION_ID, $this->application_id);
		if ($this->isColumnModified(PublicationPeer::NAME)) $criteria->add(PublicationPeer::NAME, $this->name);
		if ($this->isColumnModified(PublicationPeer::DEVELOPMENT_MODE)) $criteria->add(PublicationPeer::DEVELOPMENT_MODE, $this->development_mode);
		if ($this->isColumnModified(PublicationPeer::SUBSCRIPTION_BEHAVIOR)) $criteria->add(PublicationPeer::SUBSCRIPTION_BEHAVIOR, $this->subscription_behavior);
		if ($this->isColumnModified(PublicationPeer::ISSUE_DOWNLOAD_SECURITY)) $criteria->add(PublicationPeer::ISSUE_DOWNLOAD_SECURITY, $this->issue_download_security);
		if ($this->isColumnModified(PublicationPeer::ITUNES_REVALIDATION_DURATION)) $criteria->add(PublicationPeer::ITUNES_REVALIDATION_DURATION, $this->itunes_revalidation_duration);
		if ($this->isColumnModified(PublicationPeer::ITUNES_PRODUCTION_LEVEL)) $criteria->add(PublicationPeer::ITUNES_PRODUCTION_LEVEL, $this->itunes_production_level);
		if ($this->isColumnModified(PublicationPeer::ITUNES_SHARED_SECRET)) $criteria->add(PublicationPeer::ITUNES_SHARED_SECRET, $this->itunes_shared_secret);
		if ($this->isColumnModified(PublicationPeer::ITUNES_UPDATED)) $criteria->add(PublicationPeer::ITUNES_UPDATED, $this->itunes_updated);
		if ($this->isColumnModified(PublicationPeer::SANDBOX_PEM)) $criteria->add(PublicationPeer::SANDBOX_PEM, $this->sandbox_pem);
		if ($this->isColumnModified(PublicationPeer::SANDBOX_PASSWORD)) $criteria->add(PublicationPeer::SANDBOX_PASSWORD, $this->sandbox_password);
		if ($this->isColumnModified(PublicationPeer::PRODUCTION_PEM)) $criteria->add(PublicationPeer::PRODUCTION_PEM, $this->production_pem);
		if ($this->isColumnModified(PublicationPeer::PRODUCTION_PASSWORD)) $criteria->add(PublicationPeer::PRODUCTION_PASSWORD, $this->production_password);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PublicationPeer::DATABASE_NAME);

		$criteria->add(PublicationPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Publication (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setApplicationId($this->application_id);

		$copyObj->setName($this->name);

		$copyObj->setDevelopmentMode($this->development_mode);

		$copyObj->setSubscriptionBehavior($this->subscription_behavior);

		$copyObj->setIssueDownloadSecurity($this->issue_download_security);

		$copyObj->setItunesRevalidationDuration($this->itunes_revalidation_duration);

		$copyObj->setItunesProductionLevel($this->itunes_production_level);

		$copyObj->setItunesSharedSecret($this->itunes_shared_secret);

		$copyObj->setItunesUpdated($this->itunes_updated);

		$copyObj->setSandboxPem($this->sandbox_pem);

		$copyObj->setSandboxPassword($this->sandbox_password);

		$copyObj->setProductionPem($this->production_pem);

		$copyObj->setProductionPassword($this->production_password);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getIssues() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIssue($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Publication Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PublicationPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PublicationPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collIssues collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIssues()
	 */
	public function clearIssues()
	{
		$this->collIssues = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIssues collection (array).
	 *
	 * By default this just sets the collIssues collection to an empty array (like clearcollIssues());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIssues()
	{
		$this->collIssues = array();
	}

	/**
	 * Gets an array of Issue objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Publication has previously been saved, it will retrieve
	 * related Issues from storage. If this Publication is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Issue[]
	 * @throws     PropelException
	 */
	public function getIssues($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PublicationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIssues === null) {
			if ($this->isNew()) {
			   $this->collIssues = array();
			} else {

				$criteria->add(IssuePeer::PUBLICATION_ID, $this->id);

				IssuePeer::addSelectColumns($criteria);
				$this->collIssues = IssuePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IssuePeer::PUBLICATION_ID, $this->id);

				IssuePeer::addSelectColumns($criteria);
				if (!isset($this->lastIssueCriteria) || !$this->lastIssueCriteria->equals($criteria)) {
					$this->collIssues = IssuePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIssueCriteria = $criteria;
		return $this->collIssues;
	}

	/**
	 * Returns the number of related Issue objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Issue objects.
	 * @throws     PropelException
	 */
	public function countIssues(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PublicationPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIssues === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IssuePeer::PUBLICATION_ID, $this->id);

				$count = IssuePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IssuePeer::PUBLICATION_ID, $this->id);

				if (!isset($this->lastIssueCriteria) || !$this->lastIssueCriteria->equals($criteria)) {
					$count = IssuePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIssues);
				}
			} else {
				$count = count($this->collIssues);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Issue object to this object
	 * through the Issue foreign key attribute.
	 *
	 * @param      Issue $l Issue
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIssue(Issue $l)
	{
		if ($this->collIssues === null) {
			$this->initIssues();
		}
		if (!in_array($l, $this->collIssues, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIssues, $l);
			$l->setPublication($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collIssues) {
				foreach ((array) $this->collIssues as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collIssues = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePublication:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePublication::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePublication
